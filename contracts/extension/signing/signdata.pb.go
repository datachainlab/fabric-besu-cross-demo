// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: signing/signdata.proto

package signing

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SignatureMessage contains a protobuf encoded Msg
type SignatureMessage struct {
	// body_bytes is protobuf serialization of a TxBody that matches the
	// representation in TxRaw.
	BodyBytes []byte `protobuf:"bytes,1,opt,name=body_bytes,json=bodyBytes,proto3" json:"body_bytes,omitempty"`
	// auth_info_bytes is a protobuf serialization of an AuthInfo that matches the
	// representation in TxRaw.
	AuthInfoBytes []byte `protobuf:"bytes,2,opt,name=auth_info_bytes,json=authInfoBytes,proto3" json:"auth_info_bytes,omitempty"`
}

func (m *SignatureMessage) Reset()         { *m = SignatureMessage{} }
func (m *SignatureMessage) String() string { return proto.CompactTextString(m) }
func (*SignatureMessage) ProtoMessage()    {}
func (*SignatureMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_abf32d2b3887b126, []int{0}
}
func (m *SignatureMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignatureMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignatureMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignatureMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureMessage.Merge(m, src)
}
func (m *SignatureMessage) XXX_Size() int {
	return m.Size()
}
func (m *SignatureMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureMessage proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SignatureMessage)(nil), "extension.signing.SignatureMessage")
}

func init() { proto.RegisterFile("signing/signdata.proto", fileDescriptor_abf32d2b3887b126) }

var fileDescriptor_abf32d2b3887b126 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x8f, 0xb1, 0x4a, 0xf5, 0x30,
	0x14, 0x80, 0x93, 0x9f, 0x1f, 0xc1, 0xa0, 0xa8, 0x45, 0x44, 0x04, 0xa3, 0x38, 0x88, 0x4b, 0x9b,
	0xc1, 0xcd, 0xf1, 0x6e, 0x0a, 0x2e, 0xba, 0xb9, 0x94, 0x24, 0x4d, 0xd3, 0x80, 0x37, 0x47, 0x72,
	0x4e, 0xc1, 0xfb, 0x06, 0x8e, 0x3e, 0x82, 0x8f, 0x73, 0xc7, 0x3b, 0x3a, 0x6a, 0xfb, 0x22, 0x92,
	0x5a, 0x9c, 0xce, 0xe1, 0x3b, 0xdf, 0x70, 0x3e, 0x71, 0x84, 0xc1, 0xc7, 0x10, 0xbd, 0xca, 0xb3,
	0xd1, 0xa4, 0xab, 0x97, 0x04, 0x04, 0xc5, 0x81, 0x7b, 0x25, 0x17, 0x31, 0x40, 0xac, 0x66, 0xe3,
	0xe4, 0xd0, 0x83, 0x87, 0xe9, 0xaa, 0xf2, 0xf6, 0x2b, 0x5e, 0xd4, 0x62, 0xff, 0x31, 0xf8, 0xa8,
	0xa9, 0x4f, 0xee, 0xde, 0x21, 0x6a, 0xef, 0x8a, 0x53, 0x21, 0x0c, 0x34, 0xab, 0xda, 0xac, 0xc8,
	0xe1, 0x31, 0x3f, 0xe7, 0x57, 0x3b, 0x0f, 0xdb, 0x99, 0x2c, 0x32, 0x28, 0x2e, 0xc5, 0x9e, 0xee,
	0xa9, 0xab, 0x43, 0x6c, 0x61, 0x76, 0xfe, 0x4d, 0xce, 0x6e, 0xc6, 0xb7, 0xb1, 0x85, 0xc9, 0xbb,
	0xf9, 0xff, 0xf6, 0x71, 0xc6, 0x16, 0xdd, 0xfa, 0x5b, 0xb2, 0xf5, 0x20, 0xf9, 0x66, 0x90, 0xfc,
	0x6b, 0x90, 0xfc, 0x7d, 0x94, 0x6c, 0x33, 0x4a, 0xf6, 0x39, 0x4a, 0xf6, 0x74, 0xe7, 0x03, 0x75,
	0xbd, 0xa9, 0x2c, 0x2c, 0x55, 0x7e, 0xdf, 0x76, 0x3a, 0xc4, 0x67, 0x6d, 0x54, 0xab, 0x4d, 0x0a,
	0xb6, 0x34, 0x0e, 0xfb, 0xd2, 0x26, 0x40, 0x2c, 0x1b, 0xb7, 0x04, 0x65, 0x21, 0x52, 0xd2, 0x96,
	0x50, 0xfd, 0x05, 0xaa, 0x39, 0xd0, 0x6c, 0x4d, 0x45, 0xd7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x1c, 0xd2, 0x09, 0x44, 0x14, 0x01, 0x00, 0x00,
}

func (m *SignatureMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignatureMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthInfoBytes) > 0 {
		i -= len(m.AuthInfoBytes)
		copy(dAtA[i:], m.AuthInfoBytes)
		i = encodeVarintSigndata(dAtA, i, uint64(len(m.AuthInfoBytes)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BodyBytes) > 0 {
		i -= len(m.BodyBytes)
		copy(dAtA[i:], m.BodyBytes)
		i = encodeVarintSigndata(dAtA, i, uint64(len(m.BodyBytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSigndata(dAtA []byte, offset int, v uint64) int {
	offset -= sovSigndata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SignatureMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BodyBytes)
	if l > 0 {
		n += 1 + l + sovSigndata(uint64(l))
	}
	l = len(m.AuthInfoBytes)
	if l > 0 {
		n += 1 + l + sovSigndata(uint64(l))
	}
	return n
}

func sovSigndata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSigndata(x uint64) (n int) {
	return sovSigndata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignatureMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigndata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignatureMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignatureMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigndata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigndata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigndata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BodyBytes = append(m.BodyBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.BodyBytes == nil {
				m.BodyBytes = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthInfoBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigndata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigndata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigndata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthInfoBytes = append(m.AuthInfoBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.AuthInfoBytes == nil {
				m.AuthInfoBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigndata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSigndata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSigndata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSigndata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSigndata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSigndata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSigndata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSigndata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSigndata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSigndata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSigndata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSigndata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSigndata = fmt.Errorf("proto: unexpected end of group")
)
